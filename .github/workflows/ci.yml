name: CI - Test and Build

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test-backend:
    runs-on: ubuntu-latest
    environment: test
    env:
      ENVIRONMENT: ${{ vars.ENVIRONMENT }}
      WHATSAPP_PHONE_NUMBER_ID: ${{ vars.WHATSAPP_PHONE_NUMBER_ID }}
      WHATSAPP_BUSINESS_ACCOUNT_ID: ${{ vars.WHATSAPP_BUSINESS_ACCOUNT_ID }}
      OPENAI_MODEL: ${{ vars.OPENAI_MODEL }}
      GCP_PROJECT_ID: ${{ vars.GCP_PROJECT_ID }}
      GCP_LOCATION: ${{ vars.GCP_LOCATION }}
      GCP_STORAGE_BUCKET: ${{ vars.GCP_STORAGE_BUCKET }}
      LANGCHAIN_TRACING_V2: ${{ vars.LANGCHAIN_TRACING_V2 }}
      FIRESTORE_COLLECTION_CHAT_HISTORY: ${{ vars.FIRESTORE_COLLECTION_CHAT_HISTORY }}
      FIRESTORE_COLLECTION_PROCESSED_MESSAGES: ${{ vars.FIRESTORE_COLLECTION_PROCESSED_MESSAGES }}
      PINECONE_INDEX_NAME: ${{ vars.PINECONE_INDEX_NAME }}
      TEMP_FILE_PATH: ${{ vars.TEMP_FILE_PATH }}
      JWT_ALGORITHM: ${{ vars.JWT_ALGORITHM }}
      JWT_ACCESS_TOKEN_EXPIRE_MINUTES: ${{ vars.JWT_ACCESS_TOKEN_EXPIRE_MINUTES }}
      DEBUG: ${{ vars.DEBUG }}
      LOG_LEVEL: ${{ vars.LOG_LEVEL }}
      API_HOST: ${{ vars.API_HOST }}
      API_PORT: ${{ vars.API_PORT }}
      WEBHOOK_TOKEN: ${{ secrets.WEBHOOK_TOKEN }}
      WHATSAPP_API_TOKEN: ${{ secrets.WHATSAPP_API_TOKEN }}
      OPENAI_API_KEY: ${{ secrets.OPENAI_API_KEY }}
      GCP_CREDENTIALS_PATH: ${{ secrets.GCP_CREDENTIALS_PATH }}
      GOOGLE_APPLICATION_CREDENTIALS: ${{ secrets.GOOGLE_APPLICATION_CREDENTIALS }}
      LANGCHAIN_API_KEY: ${{ secrets.LANGCHAIN_API_KEY }}
      PINECONE_API_KEY: ${{ secrets.PINECONE_API_KEY }}
      JWT_SECRET_KEY: ${{ secrets.JWT_SECRET_KEY }}
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Install uv
        uses: astral-sh/setup-uv@v4
        with:
          enable-cache: true

      - name: Set up Python
        run: uv python install 3.13

      - name: Install dependencies
        run: uv sync

      - name: Check specific env var
        run: echo "environment = $ENVIRONMENT"

      - name: Print all environment variables
        run: env

      - name: Run backend tests
        run: uv run pytest tests -v

  test-frontend:
    runs-on: ubuntu-latest
    environment: test
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Install frontend dependencies
        working-directory: ./frontend
        run: npm ci

      - name: Run frontend tests
        working-directory: ./frontend
        run: npm test

      - name: Build frontend
        working-directory: ./frontend
        run: npm run build

  build-docker:
    runs-on: ubuntu-latest
    environment: test
    needs: [test-backend, test-frontend]
    steps:
      - name: Checkout repo
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          docker build -t whatsapp-ai-billing-bot:${{ github.sha }} .
          docker build -t whatsapp-ai-billing-bot:latest .

      - name: Test Docker image
        run: |
          docker images | grep whatsapp-ai-billing-bot
